// <auto-generated />
using System;
using CodingAgent.Services.Orchestration.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodingAgent.Services.Orchestration.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(OrchestrationDbContext))]
    [Migration("20251025170248_AddExecutionResultEntity")]
    partial class AddExecutionResultEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("orchestration")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.CodingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("tasks", "orchestration");
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.ExecutionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Changes")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<decimal>("CostUSD")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uuid");

                    b.Property<int>("FilesChanged")
                        .HasColumnType("integer");

                    b.Property<int>("LinesAdded")
                        .HasColumnType("integer");

                    b.Property<int>("LinesRemoved")
                        .HasColumnType("integer");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<int>("TokensUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId")
                        .IsUnique();

                    b.HasIndex("Success");

                    b.ToTable("execution_results", "orchestration");
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.TaskExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ModelUsed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TaskId");

                    b.ToTable("executions", "orchestration");
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.ExecutionResult", b =>
                {
                    b.HasOne("CodingAgent.Services.Orchestration.Domain.Entities.TaskExecution", "Execution")
                        .WithOne("Result")
                        .HasForeignKey("CodingAgent.Services.Orchestration.Domain.Entities.ExecutionResult", "ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Execution");
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.TaskExecution", b =>
                {
                    b.HasOne("CodingAgent.Services.Orchestration.Domain.Entities.CodingTask", null)
                        .WithMany("Executions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.CodingTask", b =>
                {
                    b.Navigation("Executions");
                });

            modelBuilder.Entity("CodingAgent.Services.Orchestration.Domain.Entities.TaskExecution", b =>
                {
                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
